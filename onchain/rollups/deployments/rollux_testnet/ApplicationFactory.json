{
  "address": "0x1d42AdDF87f08b3C6224BD4b41C30BCc9a931d7C",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IConsensus",
          "name": "consensus",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IInputBox",
          "name": "inputBox",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IInputRelay[]",
          "name": "inputRelays",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "appOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "templateHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "contract Application",
          "name": "app",
          "type": "address"
        }
      ],
      "name": "ApplicationCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConsensus",
          "name": "_consensus",
          "type": "address"
        },
        {
          "internalType": "contract IInputBox",
          "name": "_inputBox",
          "type": "address"
        },
        {
          "internalType": "contract IInputRelay[]",
          "name": "_inputRelays",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_appOwner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_templateHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        }
      ],
      "name": "calculateApplicationAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConsensus",
          "name": "_consensus",
          "type": "address"
        },
        {
          "internalType": "contract IInputBox",
          "name": "_inputBox",
          "type": "address"
        },
        {
          "internalType": "contract IInputRelay[]",
          "name": "_inputRelays",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_appOwner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_templateHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        }
      ],
      "name": "newApplication",
      "outputs": [
        {
          "internalType": "contract Application",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConsensus",
          "name": "_consensus",
          "type": "address"
        },
        {
          "internalType": "contract IInputBox",
          "name": "_inputBox",
          "type": "address"
        },
        {
          "internalType": "contract IInputRelay[]",
          "name": "_inputRelays",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_appOwner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_templateHash",
          "type": "bytes32"
        }
      ],
      "name": "newApplication",
      "outputs": [
        {
          "internalType": "contract Application",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x726616952a08e49cbfe24bd3fd40fec1e305ea5b31b98aaeb5180843e62b7cb3",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "1732925",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xe9384475b7645da0ecba71fb1bc7fc9696cdb205854f0d7d7d9f35a6eed7d28e",
    "transactionHash": "0x726616952a08e49cbfe24bd3fd40fec1e305ea5b31b98aaeb5180843e62b7cb3",
    "logs": [],
    "blockNumber": 12741910,
    "cumulativeGasUsed": "1779778",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ed73503a9e587d6de3f12590146837ca",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IConsensus\",\"name\":\"consensus\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IInputBox\",\"name\":\"inputBox\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IInputRelay[]\",\"name\":\"inputRelays\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"appOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"templateHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"contract Application\",\"name\":\"app\",\"type\":\"address\"}],\"name\":\"ApplicationCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IConsensus\",\"name\":\"_consensus\",\"type\":\"address\"},{\"internalType\":\"contract IInputBox\",\"name\":\"_inputBox\",\"type\":\"address\"},{\"internalType\":\"contract IInputRelay[]\",\"name\":\"_inputRelays\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_appOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_templateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"calculateApplicationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConsensus\",\"name\":\"_consensus\",\"type\":\"address\"},{\"internalType\":\"contract IInputBox\",\"name\":\"_inputBox\",\"type\":\"address\"},{\"internalType\":\"contract IInputRelay[]\",\"name\":\"_inputRelays\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_appOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_templateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"newApplication\",\"outputs\":[{\"internalType\":\"contract Application\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConsensus\",\"name\":\"_consensus\",\"type\":\"address\"},{\"internalType\":\"contract IInputBox\",\"name\":\"_inputBox\",\"type\":\"address\"},{\"internalType\":\"contract IInputRelay[]\",\"name\":\"_inputRelays\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_appOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_templateHash\",\"type\":\"bytes32\"}],\"name\":\"newApplication\",\"outputs\":[{\"internalType\":\"contract Application\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ApplicationCreated(address,address,address[],address,bytes32,address)\":{\"details\":\"MUST be triggered on a successful call to `newApplication`.\",\"params\":{\"app\":\"The application\",\"appOwner\":\"The initial application owner\",\"consensus\":\"The initial consensus contract\",\"inputBox\":\"The input box contract\",\"inputRelays\":\"The input relays\",\"templateHash\":\"The initial machine state hash\"}}},\"kind\":\"dev\",\"methods\":{\"calculateApplicationAddress(address,address,address[],address,bytes32,bytes32)\":{\"details\":\"Beware that only the `newApplication` function with the `_salt` parameter      is able to deterministically deploy an application.\",\"params\":{\"_appOwner\":\"The initial application owner\",\"_consensus\":\"The initial consensus contract\",\"_inputBox\":\"The input box contract\",\"_inputRelays\":\"The input relays\",\"_salt\":\"The salt used to deterministically generate the application address\",\"_templateHash\":\"The initial machine state hash\"},\"returns\":{\"_0\":\"The deterministic application address\"}},\"newApplication(address,address,address[],address,bytes32)\":{\"details\":\"On success, MUST emit an `ApplicationCreated` event.\",\"params\":{\"_appOwner\":\"The initial application owner\",\"_consensus\":\"The initial consensus contract\",\"_inputBox\":\"The input box contract\",\"_inputRelays\":\"The input relays\",\"_templateHash\":\"The initial machine state hash\"},\"returns\":{\"_0\":\"The application\"}},\"newApplication(address,address,address[],address,bytes32,bytes32)\":{\"details\":\"On success, MUST emit an `ApplicationCreated` event.\",\"params\":{\"_appOwner\":\"The initial application owner\",\"_consensus\":\"The initial consensus contract\",\"_inputBox\":\"The input box contract\",\"_inputRelays\":\"The input relays\",\"_salt\":\"The salt used to deterministically generate the application address\",\"_templateHash\":\"The initial machine state hash\"},\"returns\":{\"_0\":\"The application\"}}},\"title\":\"Application Factory\",\"version\":1},\"userdoc\":{\"events\":{\"ApplicationCreated(address,address,address[],address,bytes32,address)\":{\"notice\":\"A new application was deployed.\"}},\"kind\":\"user\",\"methods\":{\"calculateApplicationAddress(address,address,address[],address,bytes32,bytes32)\":{\"notice\":\"Calculate the address of an application to be deployed deterministically.\"},\"newApplication(address,address,address[],address,bytes32)\":{\"notice\":\"Deploy a new application.\"},\"newApplication(address,address,address[],address,bytes32,bytes32)\":{\"notice\":\"Deploy a new application deterministically.\"}},\"notice\":\"Allows anyone to reliably deploy a new `Application` contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dapp/ApplicationFactory.sol\":\"ApplicationFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@cartesi/util/contracts/CartesiMathV2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title CartesiMath\\n/// @author Felipe Argento\\npragma solidity ^0.8.0;\\n\\nlibrary CartesiMathV2 {\\n    // mapping values are packed as bytes3 each\\n    // see test/TestCartesiMath.ts for decimal values\\n    bytes constant log2tableTimes1M =\\n        hex\\\"0000000F4240182F421E8480236E082771822AD63A2DC6C0305E8532B04834C96736B3C23876D73A187A3B9D4A3D09003E5EA63FA0C540D17741F28843057D440BA745062945F60246DC1047B917488DC7495ABA4A207C4ADF8A4B98544C4B404CF8AA4DA0E64E44434EE3054F7D6D5013B750A61A5134C851BFF05247BD52CC58534DE753CC8D54486954C19C55384255AC75561E50568DE956FB575766B057D00758376F589CFA5900BA5962BC59C3135A21CA5A7EF15ADA945B34BF5B8D805BE4DF5C3AEA5C8FA95CE3265D356C5D86835DD6735E25455E73005EBFAD5F0B525F55F75F9FA25FE85A60302460770860BD0A61023061467F6189FD61CCAE620E98624FBF62902762CFD5630ECD634D12638AA963C7966403DC643F7F647A8264B4E864EEB56527EC6560906598A365D029660724663D9766738566A8F066DDDA6712476746386779AF67ACAF67DF3A6811526842FA68743268A4FC68D55C6905536934E169640A6992CF69C13169EF326A1CD46A4A186A76FF6AA38C6ACFC0\\\";\\n\\n    /// @notice Approximates log2 * 1M\\n    /// @param _num number to take log2 * 1M of\\n    /// @return approximate log2 times 1M\\n    function log2ApproxTimes1M(uint256 _num) public pure returns (uint256) {\\n        require(_num > 0, \\\"Number cannot be zero\\\");\\n        uint256 leading = 0;\\n\\n        if (_num == 1) return 0;\\n\\n        while (_num > 128) {\\n            _num = _num >> 1;\\n            leading += 1;\\n        }\\n        return (leading * uint256(1000000)) + (getLog2TableTimes1M(_num));\\n    }\\n\\n    /// @notice navigates log2tableTimes1M\\n    /// @param _num number to take log2 of\\n    /// @return result after table look-up\\n    function getLog2TableTimes1M(uint256 _num) public pure returns (uint256) {\\n        bytes3 result = 0;\\n        for (uint8 i = 0; i < 3; i++) {\\n            bytes3 tempResult = log2tableTimes1M[(_num - 1) * 3 + i];\\n            result = result | (tempResult >> (i * 8));\\n        }\\n\\n        return uint256(uint24(result));\\n    }\\n\\n    /// @notice get floor of log2 of number\\n    /// @param _num number to take floor(log2) of\\n    /// @return floor(log2) of _num\\n    function getLog2Floor(uint256 _num) public pure returns (uint8) {\\n        require(_num != 0, \\\"log of zero is undefined\\\");\\n\\n        return uint8(255 - clz(_num));\\n    }\\n\\n    /// @notice checks if a number is Power of 2\\n    /// @param _num number to check\\n    /// @return true if number is power of 2, false if not\\n    function isPowerOf2(uint256 _num) public pure returns (bool) {\\n        if (_num == 0) return false;\\n\\n        return _num & (_num - 1) == 0;\\n    }\\n\\n    /// @notice count trailing zeros\\n    /// @param _num number you want the ctz of\\n    /// @dev this a binary search implementation\\n    function ctz(uint256 _num) public pure returns (uint256) {\\n        if (_num == 0) return 256;\\n\\n        uint256 n = 0;\\n        if (_num & 0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) {\\n            n = n + 128;\\n            _num = _num >> 128;\\n        }\\n        if (_num & 0x000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFF == 0) {\\n            n = n + 64;\\n            _num = _num >> 64;\\n        }\\n        if (_num & 0x00000000000000000000000000000000000000000000000000000000FFFFFFFF == 0) {\\n            n = n + 32;\\n            _num = _num >> 32;\\n        }\\n        if (_num & 0x000000000000000000000000000000000000000000000000000000000000FFFF == 0) {\\n            n = n + 16;\\n            _num = _num >> 16;\\n        }\\n        if (_num & 0x00000000000000000000000000000000000000000000000000000000000000FF == 0) {\\n            n = n + 8;\\n            _num = _num >> 8;\\n        }\\n        if (_num & 0x000000000000000000000000000000000000000000000000000000000000000F == 0) {\\n            n = n + 4;\\n            _num = _num >> 4;\\n        }\\n        if (_num & 0x0000000000000000000000000000000000000000000000000000000000000003 == 0) {\\n            n = n + 2;\\n            _num = _num >> 2;\\n        }\\n        if (_num & 0x0000000000000000000000000000000000000000000000000000000000000001 == 0) {\\n            n = n + 1;\\n        }\\n\\n        return n;\\n    }\\n\\n    /// @notice count leading zeros\\n    /// @param _num number you want the clz of\\n    /// @dev this a binary search implementation\\n    function clz(uint256 _num) public pure returns (uint256) {\\n        if (_num == 0) return 256;\\n\\n        uint256 n = 0;\\n        if (_num & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 == 0) {\\n            n = n + 128;\\n            _num = _num << 128;\\n        }\\n        if (_num & 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000 == 0) {\\n            n = n + 64;\\n            _num = _num << 64;\\n        }\\n        if (_num & 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 == 0) {\\n            n = n + 32;\\n            _num = _num << 32;\\n        }\\n        if (_num & 0xFFFF000000000000000000000000000000000000000000000000000000000000 == 0) {\\n            n = n + 16;\\n            _num = _num << 16;\\n        }\\n        if (_num & 0xFF00000000000000000000000000000000000000000000000000000000000000 == 0) {\\n            n = n + 8;\\n            _num = _num << 8;\\n        }\\n        if (_num & 0xF000000000000000000000000000000000000000000000000000000000000000 == 0) {\\n            n = n + 4;\\n            _num = _num << 4;\\n        }\\n        if (_num & 0xC000000000000000000000000000000000000000000000000000000000000000 == 0) {\\n            n = n + 2;\\n            _num = _num << 2;\\n        }\\n        if (_num & 0x8000000000000000000000000000000000000000000000000000000000000000 == 0) {\\n            n = n + 1;\\n        }\\n\\n        return n;\\n    }\\n}\\n\",\"keccak256\":\"0x98fb8d20c05b7c39c44171b6c524cf023da646749eb90157463538da8b2e13d3\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/MerkleV2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Library for Merkle proofs\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CartesiMathV2.sol\\\";\\n\\nlibrary MerkleV2 {\\n    using CartesiMathV2 for uint256;\\n\\n    uint128 constant L_WORD_SIZE = 3; // word = 8 bytes, log = 3\\n    // number of hashes in EMPTY_TREE_HASHES\\n    uint128 constant EMPTY_TREE_SIZE = 1952; // 61*32=1952. 32 bytes per 61 indexes (64 words)\\n\\n    // merkle root hashes of trees of zero concatenated\\n    // 32 bytes for each root, first one is keccak(0), second one is\\n    // keccak(keccack(0), keccak(0)) and so on\\n\\n    bytes constant EMPTY_TREE_HASHES =\\n        hex\\\"011b4d03dd8c01f1049143cf9c4c817e4b167f1d1b83e5c6f0f10d89ba1e7bce4d9470a821fbe90117ec357e30bad9305732fb19ddf54a07dd3e29f440619254ae39ce8537aca75e2eff3e38c98011dfe934e700a0967732fc07b430dd656a233fc9a15f5b4869c872f81087bb6104b7d63e6f9ab47f2c43f3535eae7172aa7f17d2dd614cddaa4d879276b11e0672c9560033d3e8453a1d045339d34ba601b9c37b8b13ca95166fb7af16988a70fcc90f38bf9126fd833da710a47fb37a55e68e7a427fa943d9966b389f4f257173676090c6e95f43e2cb6d65f8758111e30930b0b9deb73e155c59740bacf14a6ff04b64bb8e201a506409c3fe381ca4ea90cd5deac729d0fdaccc441d09d7325f41586ba13c801b7eccae0f95d8f3933efed8b96e5b7f6f459e9cb6a2f41bf276c7b85c10cd4662c04cbbb365434726c0a0c9695393027fb106a8153109ac516288a88b28a93817899460d6310b71cf1e6163e8806fa0d4b197a259e8c3ac28864268159d0ac85f8581ca28fa7d2c0c03eb91e3eee5ca7a3da2b3053c9770db73599fb149f620e3facef95e947c0ee860b72122e31e4bbd2b7c783d79cc30f60c6238651da7f0726f767d22747264fdb046f7549f26cc70ed5e18baeb6c81bb0625cb95bb4019aeecd40774ee87ae29ec517a71f6ee264c5d761379b3d7d617ca83677374b49d10aec50505ac087408ca892b573c267a712a52e1d06421fe276a03efb1889f337201110fdc32a81f8e152499af665835aabfdc6740c7e2c3791a31c3cdc9f5ab962f681b12fc092816a62f27d86025599a41233848702f0cfc0437b445682df51147a632a0a083d2d38b5e13e466a8935afff58bb533b3ef5d27fba63ee6b0fd9e67ff20af9d50deee3f8bf065ec220c1fd4ba57e341261d55997f85d66d32152526736872693d2b437a233e2337b715f6ac9a6a272622fdc2d67fcfe1da3459f8dab4ed7e40a657a54c36766c5e8ac9a88b35b05c34747e6507f6b044ab66180dc76ac1a696de03189593fedc0d0dbbd855c8ead673544899b0960e4a5a7ca43b4ef90afe607de7698caefdc242788f654b57a4fb32a71b335ef6ff9a4cc118b282b53bdd6d6192b7a82c3c5126b9c7e33c8e5a5ac9738b8bd31247fb7402054f97b573e8abb9faad219f4fd085aceaa7f542d787ee4196d365f3cc566e7bbcfbfd451230c48d804c017d21e2d8fa914e2559bb72bf0ab78c8ab92f00ef0d0d576eccdd486b64138a4172674857e543d1d5b639058dd908186597e366ad5f3d9c7ceaff44d04d1550b8d33abc751df07437834ba5acb32328a396994aebb3c40f759c2d6d7a3cb5377e55d5d218ef5a296dda8ddc355f3f50c3d0b660a51dfa4d98a6a5a33564556cf83c1373a814641d6a1dcef97b883fee61bb84fe60a3409340217e629cc7e4dcc93b85d8820921ff5826148b60e6939acd7838e1d7f20562bff8ee4b5ec4a05ad997a57b9796fdcb2eda87883c2640b072b140b946bfdf6575cacc066fdae04f6951e63624cbd316a677cad529bbe4e97b9144e4bc06c4afd1de55dd3e1175f90423847a230d34dfb71ed56f2965a7f6c72e6aa33c24c303fd67745d632656c5ef90bec80f4f5d1daa251988826cef375c81c36bf457e09687056f924677cb0bccf98dff81e014ce25f2d132497923e267363963cdf4302c5049d63131dc03fd95f65d8b6aa5934f817252c028c90f56d413b9d5d10d89790707dae2fabb249f649929927c21dd71e3f656826de5451c5da375aadecbd59d5ebf3a31fae65ac1b316a1611f1b276b26530f58d7247df459ce1f86db1d734f6f811932f042cee45d0e455306d01081bc3384f82c5fb2aacaa19d89cdfa46cc916eac61121475ba2e6191b4feecbe1789717021a158ace5d06744b40f551076b67cd63af60007f8c99876e1424883a45ec49d497ddaf808a5521ca74a999ab0b3c7aa9c80f85e93977ec61ce68b20307a1a81f71ca645b568fcd319ccbb5f651e87b707d37c39e15f945ea69e2f7c7d2ccc85b7e654c07e96f0636ae4044fe0e38590b431795ad0f8647bdd613713ada493cc17efd313206380e6a685b8198475bbd021c6e9d94daab2214947127506073e44d5408ba166c512a0b86805d07f5a44d3c41706be2bc15e712e55805248b92e8677d90f6d284d1d6ffaff2c430657042a0e82624fa3717b06cc0a6fd12230ea586dae83019fb9e06034ed2803c98d554b93c9a52348cafff75c40174a91f9ae6b8647854a156029f0b88b83316663ce574a4978277bb6bb27a31085634b6ec78864b6d8201c7e93903d75815067e378289a3d072ae172dafa6a452470f8d645bebfad9779594fc0784bb764a22e3a8181d93db7bf97893c414217a618ccb14caa9e92e8c61673afc9583662e812adba1f87a9c68202d60e909efab43c42c0cb00695fc7f1ffe67c75ca894c3c51e1e5e731360199e600f6ced9a87b2a6a87e70bf251bb5075ab222138288164b2eda727515ea7de12e2496d4fe42ea8d1a120c03cf9c50622c2afe4acb0dad98fd62d07ab4e828a94495f6d1ab973982c7ccbe6c1fae02788e4422ae22282fa49cbdb04ba54a7a238c6fc41187451383460762c06d1c8a72b9cd718866ad4b689e10c9a8c38fe5ef045bd785b01e980fc82c7e3532ce81876b778dd9f1ceeba4478e86411fb6fdd790683916ca832592485093644e8760cd7b4c01dba1ccc82b661bf13f0e3f34acd6b88\\\";\\n\\n    /// @notice Gets merkle root hash of drive with a replacement\\n    /// @param _position position of _drive\\n    /// @param _logSizeOfReplacement log2 of size the replacement\\n    /// @param _logSizeOfFullDrive log2 of size the full drive, which can be the entire machine\\n    /// @param _replacement hash of the replacement\\n    /// @param siblings of replacement that merkle root can be calculated\\n    function getRootAfterReplacementInDrive(\\n        uint256 _position,\\n        uint256 _logSizeOfReplacement,\\n        uint256 _logSizeOfFullDrive,\\n        bytes32 _replacement,\\n        bytes32[] calldata siblings\\n    ) public pure returns (bytes32) {\\n        require(\\n            _logSizeOfFullDrive >= _logSizeOfReplacement && _logSizeOfReplacement >= 3 && _logSizeOfFullDrive <= 64,\\n            \\\"3 <= logSizeOfReplacement <= logSizeOfFullDrive <= 64\\\"\\n        );\\n\\n        uint256 size = 1 << _logSizeOfReplacement;\\n\\n        require(((size - 1) & _position) == 0, \\\"Position is not aligned\\\");\\n        require(siblings.length == _logSizeOfFullDrive - _logSizeOfReplacement, \\\"Proof length does not match\\\");\\n\\n        for (uint256 i; i < siblings.length; i++) {\\n            if ((_position & (size << i)) == 0) {\\n                _replacement = keccak256(abi.encodePacked(_replacement, siblings[i]));\\n            } else {\\n                _replacement = keccak256(abi.encodePacked(siblings[i], _replacement));\\n            }\\n        }\\n\\n        return _replacement;\\n    }\\n\\n    /// @notice Gets precomputed hash of zero in empty tree hashes\\n    /// @param _index of hash wanted\\n    /// @dev first index is keccak(0), second index is keccak(keccak(0), keccak(0))\\n    function getEmptyTreeHashAtIndex(uint256 _index) public pure returns (bytes32) {\\n        uint256 start = _index * 32;\\n        require(EMPTY_TREE_SIZE >= start + 32, \\\"index out of bounds\\\");\\n        bytes32 hashedZeros;\\n        bytes memory zeroTree = EMPTY_TREE_HASHES;\\n\\n        // first word is length, then skip index words\\n        assembly {\\n            hashedZeros := mload(add(add(zeroTree, 0x20), start))\\n        }\\n        return hashedZeros;\\n    }\\n\\n    /// @notice get merkle root of generic array of bytes\\n    /// @param _data array of bytes to be merklelized\\n    /// @param _log2Size log2 of total size of the drive\\n    /// @dev _data is padded with zeroes until is multiple of 8\\n    /// @dev root is completed with zero tree until log2size is complete\\n    /// @dev hashes are taken word by word (8 bytes by 8 bytes)\\n    function getMerkleRootFromBytes(bytes calldata _data, uint256 _log2Size) public pure returns (bytes32) {\\n        require(_log2Size >= 3 && _log2Size <= 64, \\\"range of log2Size: [3,64]\\\");\\n\\n        // if _data is empty return pristine drive of size log2size\\n        if (_data.length == 0) return getEmptyTreeHashAtIndex(_log2Size - 3);\\n\\n        // total size of the drive in words\\n        uint256 size = 1 << (_log2Size - 3);\\n        require(size << L_WORD_SIZE >= _data.length, \\\"data is bigger than drive\\\");\\n        // the stack depth is log2(_data.length / 8) + 2\\n        uint256 stack_depth = 2 + ((_data.length) >> L_WORD_SIZE).getLog2Floor();\\n        bytes32[] memory stack = new bytes32[](stack_depth);\\n\\n        uint256 numOfHashes; // total number of hashes on stack (counting levels)\\n        uint256 stackLength; // total length of stack\\n        uint256 numOfJoins; // number of hashes of the same level on stack\\n        uint256 topStackLevel; // hash level of the top of the stack\\n\\n        while (numOfHashes < size) {\\n            if ((numOfHashes << L_WORD_SIZE) < _data.length) {\\n                // we still have words to hash\\n                stack[stackLength] = getHashOfWordAtIndex(_data, numOfHashes);\\n                numOfHashes++;\\n\\n                numOfJoins = numOfHashes;\\n            } else {\\n                // since padding happens in hashOfWordAtIndex function\\n                // we only need to complete the stack with pre-computed\\n                // hash(0), hash(hash(0),hash(0)) and so on\\n                topStackLevel = numOfHashes.ctz();\\n\\n                stack[stackLength] = getEmptyTreeHashAtIndex(topStackLevel);\\n\\n                //Empty Tree Hash summarizes many hashes\\n                numOfHashes = numOfHashes + (1 << topStackLevel);\\n                numOfJoins = numOfHashes >> topStackLevel;\\n            }\\n\\n            stackLength++;\\n\\n            // while there are joins, hash top of stack together\\n            while (numOfJoins & 1 == 0) {\\n                bytes32 h2 = stack[stackLength - 1];\\n                bytes32 h1 = stack[stackLength - 2];\\n\\n                stack[stackLength - 2] = keccak256(abi.encodePacked(h1, h2));\\n                stackLength = stackLength - 1; // remove hashes from stack\\n\\n                numOfJoins = numOfJoins >> 1;\\n            }\\n        }\\n        require(stackLength == 1, \\\"stack error\\\");\\n\\n        return stack[0];\\n    }\\n\\n    /// @notice Get the hash of a word in an array of bytes\\n    /// @param _data array of bytes\\n    /// @param _wordIndex index of word inside the bytes to get the hash of\\n    /// @dev if word is incomplete (< 8 bytes) it gets padded with zeroes\\n    function getHashOfWordAtIndex(bytes calldata _data, uint256 _wordIndex) public pure returns (bytes32) {\\n        uint256 start = _wordIndex << L_WORD_SIZE;\\n        uint256 end = start + (1 << L_WORD_SIZE);\\n\\n        // TODO: in .lua this just returns zero, but this might be more consistent\\n        require(start <= _data.length, \\\"word out of bounds\\\");\\n\\n        if (end <= _data.length) {\\n            return keccak256(abi.encodePacked(_data[start:end]));\\n        }\\n\\n        // word is incomplete\\n        // fill paddedSlice with incomplete words - the rest is going to be bytes(0)\\n        bytes memory paddedSlice = new bytes(8);\\n        uint256 remaining = _data.length - start;\\n\\n        for (uint256 i; i < remaining; i++) {\\n            paddedSlice[i] = _data[start + i];\\n        }\\n\\n        return keccak256(paddedSlice);\\n    }\\n\\n    /// @notice Calculate the root of Merkle tree from an array of power of 2 elements\\n    /// @param hashes The array containing power of 2 elements\\n    /// @return byte32 the root hash being calculated\\n    function calculateRootFromPowerOfTwo(bytes32[] memory hashes) public pure returns (bytes32) {\\n        // revert when the input is not of power of 2\\n        require((hashes.length).isPowerOf2(), \\\"array len not power of 2\\\");\\n\\n        if (hashes.length == 1) {\\n            return hashes[0];\\n        } else {\\n            bytes32[] memory newHashes = new bytes32[](hashes.length >> 1);\\n\\n            for (uint256 i; i < hashes.length; i += 2) {\\n                newHashes[i >> 1] = keccak256(abi.encodePacked(hashes[i], hashes[i + 1]));\\n            }\\n\\n            return calculateRootFromPowerOfTwo(newHashes);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x73d86cb2dfa2ca887987c6da8d193d523c6a65ea89e296d1f47f190ebda7fa9b\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165, ERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\nimport {IERC1155Receiver} from \\\"../IERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n */\\nabstract contract ERC1155Holder is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xc26cd2e2bcf59b87c986fc653545b35010db9c585a3f3312fe61d7b1b3805735\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or\\n * {IERC721-setApprovalForAll}.\\n */\\nabstract contract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xaad20f8713b5cd98114278482d5d91b9758f9727048527d582e8e88fd4901fd8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Not enough balance for performing a CREATE2 deploy.\\n     */\\n    error Create2InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev There's no code to deploy.\\n     */\\n    error Create2EmptyBytecode();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error Create2FailedDeployment();\\n\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        if (address(this).balance < amount) {\\n            revert Create2InsufficientBalance(address(this).balance, amount);\\n        }\\n        if (bytecode.length == 0) {\\n            revert Create2EmptyBytecode();\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        if (addr == address(0)) {\\n            revert Create2FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2b9807d194b92f1068d868e9587d27037264a9a067c778486f86ae21c61cbd5e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, provided the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n *\\n * BitMaps pack 256 booleans across each bit of a single 256-bit slot of `uint256` type.\\n * Hence booleans corresponding to 256 _sequential_ indices would only consume a single slot,\\n * unlike the regular `bool` which would consume an entire slot for a single value.\\n *\\n * This results in gas savings in two ways:\\n *\\n * - Setting a zero value to non-zero only once every 256 times\\n * - Accessing the same warm slot for every 256 _sequential_ indices\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 bucket => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0x3616f1b0d0a9ee1ca8f0953ecaceb9230e36f691c7974d30f964212acff52d2b\",\"license\":\"MIT\"},\"contracts/common/CanonicalMachine.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @title Canonical Machine Constants Library\\n///\\n/// @notice Defines several constants related to the reference implementation\\n/// of the RISC-V machine that runs Linux, also known as the \\\"Cartesi Machine\\\".\\nlibrary CanonicalMachine {\\n    /// @notice Base-2 logarithm of number of bytes.\\n    type Log2Size is uint64;\\n\\n    /// @notice Machine word size (8 bytes).\\n    Log2Size constant WORD_LOG2_SIZE = Log2Size.wrap(3);\\n\\n    /// @notice Machine address space size (2^64 bytes).\\n    Log2Size constant MACHINE_LOG2_SIZE = Log2Size.wrap(64);\\n\\n    /// @notice Keccak-256 output size (32 bytes).\\n    Log2Size constant KECCAK_LOG2_SIZE = Log2Size.wrap(5);\\n\\n    /// @notice Maximum input size (~2 megabytes).\\n    /// @dev The offset and size fields use up the extra 64 bytes.\\n    uint256 constant INPUT_MAX_SIZE = (1 << 21) - 64;\\n\\n    /// @notice Maximum voucher metadata memory range (2 megabytes).\\n    Log2Size constant VOUCHER_METADATA_LOG2_SIZE = Log2Size.wrap(21);\\n\\n    /// @notice Maximum notice metadata memory range (2 megabytes).\\n    Log2Size constant NOTICE_METADATA_LOG2_SIZE = Log2Size.wrap(21);\\n\\n    /// @notice Maximum epoch voucher memory range (128 megabytes).\\n    Log2Size constant EPOCH_VOUCHER_LOG2_SIZE = Log2Size.wrap(37);\\n\\n    /// @notice Maximum epoch notice memory range (128 megabytes).\\n    Log2Size constant EPOCH_NOTICE_LOG2_SIZE = Log2Size.wrap(37);\\n\\n    /// @notice Unwrap `s` into its underlying uint64 value.\\n    /// @param s Base-2 logarithm of some number of bytes\\n    function uint64OfSize(Log2Size s) internal pure returns (uint64) {\\n        return Log2Size.unwrap(s);\\n    }\\n\\n    /// @notice Return the position of an intra memory range on a memory range\\n    ///         with contents with the same size.\\n    /// @param index Index of intra memory range\\n    /// @param log2Size Base-2 logarithm of intra memory range size\\n    function getIntraMemoryRangePosition(\\n        uint64 index,\\n        Log2Size log2Size\\n    ) internal pure returns (uint64) {\\n        return index << Log2Size.unwrap(log2Size);\\n    }\\n}\\n\",\"keccak256\":\"0x97cdce56cdb4f0b4164e6be3a72e50469a3124e4716e753a1792aa70eac614f5\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/common/InputRange.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @notice A range of input indices.\\n/// @param firstIndex The index of the first input\\n/// @param lastIndex The index of the last input\\nstruct InputRange {\\n    uint256 firstIndex;\\n    uint256 lastIndex;\\n}\\n\",\"keccak256\":\"0x8d23d2966f459d21d0c0a8668c517377f0b168116ca0559120c1cb6402e13a27\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/common/OutputEncoding.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @title Output Encoding Library\\n///\\n/// @notice Defines the encoding of outputs generated by the off-chain machine.\\nlibrary OutputEncoding {\\n    /// @notice Encode a notice.\\n    /// @param notice The notice\\n    /// @return The encoded output\\n    function encodeNotice(\\n        bytes calldata notice\\n    ) internal pure returns (bytes memory) {\\n        return abi.encode(notice);\\n    }\\n\\n    /// @notice Encode a voucher.\\n    /// @param destination The address that will receive the payload through a message call\\n    /// @param payload The payload, which\\u2014in the case of Solidity contracts\\u2014encodes a function call\\n    /// @return The encoded output\\n    function encodeVoucher(\\n        address destination,\\n        bytes calldata payload\\n    ) internal pure returns (bytes memory) {\\n        return abi.encode(destination, payload);\\n    }\\n}\\n\",\"keccak256\":\"0xfbf8bd40a11aeb380c77910ef7a8c3a4b358dddbd8bc795529de39c955dd6f60\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/common/OutputValidityProof.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @param inputIndexWithinEpoch Which input, inside the epoch, the output belongs to\\n/// @param outputIndexWithinInput Index of output emitted by the input\\n/// @param outputHashesRootHash Merkle root of hashes of outputs emitted by the input\\n/// @param vouchersEpochRootHash Merkle root of all epoch's voucher metadata hashes\\n/// @param noticesEpochRootHash Merkle root of all epoch's notice metadata hashes\\n/// @param machineStateHash Hash of the machine state claimed this epoch\\n/// @param outputHashInOutputHashesSiblings Proof that this output metadata is in metadata memory range\\n/// @param outputHashesInEpochSiblings Proof that this output metadata is in epoch's output memory range\\nstruct OutputValidityProof {\\n    uint64 inputIndexWithinEpoch;\\n    uint64 outputIndexWithinInput;\\n    bytes32 outputHashesRootHash;\\n    bytes32 vouchersEpochRootHash;\\n    bytes32 noticesEpochRootHash;\\n    bytes32 machineStateHash;\\n    bytes32[] outputHashInOutputHashesSiblings;\\n    bytes32[] outputHashesInEpochSiblings;\\n}\\n\",\"keccak256\":\"0x3bf30979ee0d2774ca8b6aa3dda9fd65bb746319a81ce7cff943c9cd9981dcd7\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/common/Proof.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {OutputValidityProof} from \\\"./OutputValidityProof.sol\\\";\\nimport {InputRange} from \\\"./InputRange.sol\\\";\\n\\n/// @notice Data for validating outputs.\\n/// @param validity A validity proof for the output\\n/// @param inputRange The range of inputs accepted during the epoch\\nstruct Proof {\\n    OutputValidityProof validity;\\n    InputRange inputRange;\\n}\\n\",\"keccak256\":\"0xe953dce15c46bf9e4d78f4bcdd3c3f748ad898ec46e224720c6c7716a29957fe\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/consensus/IConsensus.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {InputRange} from \\\"../common/InputRange.sol\\\";\\n\\n/// @notice Provides epoch hashes for applications.\\n/// @notice An epoch hash is produced after the machine processes a range of inputs and the epoch is finalized.\\n/// This hash can be later used to prove that any given output was produced by the machine during the epoch.\\n/// @notice After an epoch is finalized, a validator may submit a claim containing: the address of the application contract,\\n/// the range of inputs accepted during the epoch, and the epoch hash.\\n/// @notice Validators may synchronize epoch finalization, but such mechanism is not specified by this interface.\\n/// @notice A validator should be able to save transaction fees by not submitting a claim if it was...\\n/// - already submitted by the validator (see the `ClaimSubmission` event) or;\\n/// - already accepted by the consensus (see the `ClaimAcceptance` event).\\n/// @notice The acceptance criteria for claims may depend on the type of consensus, and is not specified by this interface.\\n/// For example, a claim may be accepted if it was...\\n/// - submitted by an authority or;\\n/// - submitted by the majority of a quorum or;\\n/// - submitted and not proven wrong after some period of time.\\ninterface IConsensus {\\n    /// @notice A claim was submitted to the consensus.\\n    /// @param submitter The submitter address\\n    /// @param app The application contract address\\n    /// @param inputRange The input range\\n    /// @param epochHash The epoch hash\\n    /// @dev Overwrites any previous submissions regarding `submitter`, `app` and `inputRange`.\\n    event ClaimSubmission(\\n        address indexed submitter,\\n        address indexed app,\\n        InputRange inputRange,\\n        bytes32 epochHash\\n    );\\n\\n    /// @notice A claim was accepted by the consensus.\\n    /// @param app The application contract address\\n    /// @param inputRange The input range\\n    /// @param epochHash The epoch hash\\n    /// @dev MUST be triggered after some `ClaimSubmission` event regarding `app`, `inputRange` and `epochHash`.\\n    /// @dev Overwrites any previous acceptances regarding `app` and `inputRange`.\\n    event ClaimAcceptance(\\n        address indexed app,\\n        InputRange inputRange,\\n        bytes32 epochHash\\n    );\\n\\n    /// @notice Submit a claim to the consensus.\\n    /// @param app The application contract address\\n    /// @param inputRange The input range\\n    /// @param epochHash The epoch hash\\n    /// @dev On success, MUST trigger a `ClaimSubmission` event.\\n    function submitClaim(\\n        address app,\\n        InputRange calldata inputRange,\\n        bytes32 epochHash\\n    ) external;\\n\\n    /// @notice Get the epoch hash for a certain application and input range.\\n    /// @param app The application contract address\\n    /// @param inputRange The input range\\n    /// @return epochHash The epoch hash\\n    /// @dev For claimed epochs, must return the epoch hash of the last accepted claim.\\n    /// @dev For unclaimed epochs, MUST either revert or return `bytes32(0)`.\\n    function getEpochHash(\\n        address app,\\n        InputRange calldata inputRange\\n    ) external view returns (bytes32 epochHash);\\n}\\n\",\"keccak256\":\"0xae8029170e0c7c0e43f1451179996e8f4f281382484c482fa163c6e6abf77274\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/dapp/Application.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {IApplication} from \\\"./IApplication.sol\\\";\\nimport {IConsensus} from \\\"../consensus/IConsensus.sol\\\";\\nimport {IInputBox} from \\\"../inputs/IInputBox.sol\\\";\\nimport {IInputRelay} from \\\"../inputs/IInputRelay.sol\\\";\\nimport {LibOutputValidation} from \\\"../library/LibOutputValidation.sol\\\";\\nimport {OutputValidityProof} from \\\"../common/OutputValidityProof.sol\\\";\\nimport {Proof} from \\\"../common/Proof.sol\\\";\\nimport {LibProof} from \\\"../library/LibProof.sol\\\";\\nimport {InputRange} from \\\"../common/InputRange.sol\\\";\\nimport {LibInputRange} from \\\"../library/LibInputRange.sol\\\";\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ERC721Holder} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport {ERC1155Holder} from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {BitMaps} from \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\n\\n/// @notice This contract acts as the base layer incarnation of an application running on the execution layer.\\n/// The application is hereby able to interact with other smart contracts through the execution of vouchers\\n/// and the validation of notices. These outputs are generated by the application backend on the execution\\n/// layer and can be proven in the base layer thanks to claims submitted by a consensus contract.\\n///\\n/// A voucher is a one-time message call to another contract. It can encode asset transfers, approvals,\\n/// or any other message call that doesn't require Ether to be sent along. A voucher will only be consumed\\n/// if the underlying message call succeeds (that is, it doesn't revert). Furthermore, the return data of\\n/// the message call is discarded entirely. As a protective measure against reentrancy attacks, nested\\n/// voucher executions are prohibited.\\n///\\n/// A notice, on the other hand, constitutes an arbitrary piece of data that can be proven any number of times.\\n/// On their own, they do not trigger any type of contract-to-contract interaction.\\n/// Rather, they merely serve to attest off-chain results, e.g. which player won a particular chess match.\\n///\\n/// Every application is subscribed to a consensus contract, and governed by a single address, the owner.\\n/// The consensus has the power of submitting claims, which, in turn, are used to validate vouchers and notices.\\n/// Meanwhile, the owner has complete power over the application, as it can replace the consensus at any time.\\n/// Therefore, the users of an application must trust both the consensus and the application owner.\\n///\\n/// The application developer can choose whichever ownership and consensus models it wants.\\n///\\n/// Examples of application ownership models include:\\n///\\n/// * no owner (address zero)\\n/// * individual signer (externally-owned account)\\n/// * multiple signers (multi-sig)\\n/// * DAO (decentralized autonomous organization)\\n/// * self-owned application (off-chain governance logic)\\n///\\n/// See `IConsensus` for examples of consensus models.\\n///\\n/// This contract inherits the following OpenZeppelin contracts.\\n/// For more information, please consult OpenZeppelin's official documentation.\\n///\\n/// * `Ownable`\\n/// * `ERC721Holder`\\n/// * `ERC1155Holder`\\n/// * `ReentrancyGuard`\\n///\\ncontract Application is\\n    IApplication,\\n    Ownable,\\n    ERC721Holder,\\n    ERC1155Holder,\\n    ReentrancyGuard\\n{\\n    using BitMaps for BitMaps.BitMap;\\n    using LibOutputValidation for OutputValidityProof;\\n    using LibProof for Proof;\\n    using LibInputRange for InputRange;\\n    using Address for address;\\n\\n    /// @notice Raised when executing an already executed voucher.\\n    error VoucherReexecutionNotAllowed();\\n\\n    /// @notice Raised when the transfer fails.\\n    error EtherTransferFailed();\\n\\n    /// @notice Raised when a mehtod is not called by application itself.\\n    error OnlyApplication();\\n\\n    /// @notice The initial machine state hash.\\n    /// @dev See the `getTemplateHash` function.\\n    bytes32 internal immutable templateHash;\\n\\n    /// @notice The executed voucher bitmask, which keeps track of which vouchers\\n    ///         were executed already in order to avoid re-execution.\\n    /// @dev See the `wasVoucherExecuted` function.\\n    mapping(uint256 => BitMaps.BitMap) internal voucherBitmaps;\\n\\n    /// @notice The current consensus contract.\\n    /// @dev See the `getConsensus` and `migrateToConsensus` functions.\\n    IConsensus internal consensus;\\n\\n    /// @notice The input box contract.\\n    /// @dev See the `getInputBox` function.\\n    IInputBox internal immutable inputBox;\\n\\n    /// @notice The input relays.\\n    /// @dev See the `getInputRelays` function.\\n    IInputRelay[] internal inputRelays;\\n\\n    /// @notice Creates an `Application` contract.\\n    /// @param _consensus The initial consensus contract\\n    /// @param _inputBox The input box contract\\n    /// @param _inputRelays The input relays\\n    /// @param _initialOwner The initial application owner\\n    /// @param _templateHash The initial machine state hash\\n    constructor(\\n        IConsensus _consensus,\\n        IInputBox _inputBox,\\n        IInputRelay[] memory _inputRelays,\\n        address _initialOwner,\\n        bytes32 _templateHash\\n    ) Ownable(_initialOwner) {\\n        templateHash = _templateHash;\\n        consensus = _consensus;\\n        inputBox = _inputBox;\\n        for (uint256 i; i < _inputRelays.length; ++i) {\\n            inputRelays.push(_inputRelays[i]);\\n        }\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC1155Holder, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IApplication).interfaceId ||\\n            interfaceId == type(IERC721Receiver).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function executeVoucher(\\n        address _destination,\\n        bytes calldata _payload,\\n        Proof calldata _proof\\n    ) external override nonReentrant {\\n        uint256 inputIndex = _proof.calculateInputIndex();\\n\\n        if (!_proof.inputRange.contains(inputIndex)) {\\n            revert InputIndexOutOfRange(inputIndex, _proof.inputRange);\\n        }\\n\\n        bytes32 epochHash = getEpochHash(_proof.inputRange);\\n\\n        // reverts if proof isn't valid\\n        _proof.validity.validateVoucher(_destination, _payload, epochHash);\\n\\n        uint256 outputIndexWithinInput = _proof.validity.outputIndexWithinInput;\\n        BitMaps.BitMap storage bitmap = voucherBitmaps[outputIndexWithinInput];\\n\\n        // check if voucher has been executed\\n        if (bitmap.get(inputIndex)) {\\n            revert VoucherReexecutionNotAllowed();\\n        }\\n\\n        // execute voucher\\n        _destination.functionCall(_payload);\\n\\n        // mark it as executed and emit event\\n        bitmap.set(inputIndex);\\n        emit VoucherExecuted(inputIndex, outputIndexWithinInput);\\n    }\\n\\n    function wasVoucherExecuted(\\n        uint256 _inputIndex,\\n        uint256 _outputIndexWithinInput\\n    ) external view override returns (bool) {\\n        return voucherBitmaps[_outputIndexWithinInput].get(_inputIndex);\\n    }\\n\\n    function validateNotice(\\n        bytes calldata _notice,\\n        Proof calldata _proof\\n    ) external view override {\\n        uint256 inputIndex = _proof.calculateInputIndex();\\n\\n        if (!_proof.inputRange.contains(inputIndex)) {\\n            revert InputIndexOutOfRange(inputIndex, _proof.inputRange);\\n        }\\n\\n        bytes32 epochHash = getEpochHash(_proof.inputRange);\\n\\n        // reverts if proof isn't valid\\n        _proof.validity.validateNotice(_notice, epochHash);\\n    }\\n\\n    function migrateToConsensus(\\n        IConsensus _newConsensus\\n    ) external override onlyOwner {\\n        consensus = _newConsensus;\\n        emit NewConsensus(_newConsensus);\\n    }\\n\\n    function getTemplateHash() external view override returns (bytes32) {\\n        return templateHash;\\n    }\\n\\n    function getConsensus() external view override returns (IConsensus) {\\n        return consensus;\\n    }\\n\\n    function getInputBox() external view override returns (IInputBox) {\\n        return inputBox;\\n    }\\n\\n    function getInputRelays()\\n        external\\n        view\\n        override\\n        returns (IInputRelay[] memory)\\n    {\\n        return inputRelays;\\n    }\\n\\n    /// @notice Accept Ether transfers.\\n    /// @dev If you wish to transfer Ether to an application while informing\\n    ///      the backend of it, then please do so through the Ether portal contract.\\n    receive() external payable {}\\n\\n    /// @notice Transfer some amount of Ether to some recipient.\\n    /// @param _receiver The address which will receive the amount of Ether\\n    /// @param _value The amount of Ether to be transferred in Wei\\n    /// @dev This function can only be called by the application itself through vouchers.\\n    ///      If this method is not called by application itself, `OnlyApplication` error is raised.\\n    ///      If the transfer fails, `EtherTransferFailed` error is raised.\\n    function withdrawEther(address _receiver, uint256 _value) external {\\n        if (msg.sender != address(this)) {\\n            revert OnlyApplication();\\n        }\\n\\n        (bool sent, ) = _receiver.call{value: _value}(\\\"\\\");\\n\\n        if (!sent) {\\n            revert EtherTransferFailed();\\n        }\\n    }\\n\\n    /// @notice Get the epoch hash regarding the given input range\\n    /// and the application from the current consensus.\\n    /// @param inputRange The input range\\n    /// @return The epoch hash\\n    function getEpochHash(\\n        InputRange calldata inputRange\\n    ) internal view returns (bytes32) {\\n        return consensus.getEpochHash(address(this), inputRange);\\n    }\\n}\\n\",\"keccak256\":\"0xf248dd345416f57ef4cd23437f142234a1c4abef7138d93d4384c486a6a4fcaa\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/dapp/ApplicationFactory.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {Create2} from \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\nimport {IApplicationFactory} from \\\"./IApplicationFactory.sol\\\";\\nimport {IConsensus} from \\\"../consensus/IConsensus.sol\\\";\\nimport {IInputBox} from \\\"../inputs/IInputBox.sol\\\";\\nimport {IInputRelay} from \\\"../inputs/IInputRelay.sol\\\";\\nimport {Application} from \\\"./Application.sol\\\";\\n\\n/// @title Application Factory\\n/// @notice Allows anyone to reliably deploy a new `Application` contract.\\ncontract ApplicationFactory is IApplicationFactory {\\n    function newApplication(\\n        IConsensus _consensus,\\n        IInputBox _inputBox,\\n        IInputRelay[] memory _inputRelays,\\n        address _appOwner,\\n        bytes32 _templateHash\\n    ) external override returns (Application) {\\n        Application app = new Application(\\n            _consensus,\\n            _inputBox,\\n            _inputRelays,\\n            _appOwner,\\n            _templateHash\\n        );\\n\\n        emit ApplicationCreated(\\n            _consensus,\\n            _inputBox,\\n            _inputRelays,\\n            _appOwner,\\n            _templateHash,\\n            app\\n        );\\n\\n        return app;\\n    }\\n\\n    function newApplication(\\n        IConsensus _consensus,\\n        IInputBox _inputBox,\\n        IInputRelay[] memory _inputRelays,\\n        address _appOwner,\\n        bytes32 _templateHash,\\n        bytes32 _salt\\n    ) external override returns (Application) {\\n        Application app = new Application{salt: _salt}(\\n            _consensus,\\n            _inputBox,\\n            _inputRelays,\\n            _appOwner,\\n            _templateHash\\n        );\\n\\n        emit ApplicationCreated(\\n            _consensus,\\n            _inputBox,\\n            _inputRelays,\\n            _appOwner,\\n            _templateHash,\\n            app\\n        );\\n\\n        return app;\\n    }\\n\\n    function calculateApplicationAddress(\\n        IConsensus _consensus,\\n        IInputBox _inputBox,\\n        IInputRelay[] memory _inputRelays,\\n        address _appOwner,\\n        bytes32 _templateHash,\\n        bytes32 _salt\\n    ) external view override returns (address) {\\n        return\\n            Create2.computeAddress(\\n                _salt,\\n                keccak256(\\n                    abi.encodePacked(\\n                        type(Application).creationCode,\\n                        abi.encode(\\n                            _consensus,\\n                            _inputBox,\\n                            _inputRelays,\\n                            _appOwner,\\n                            _templateHash\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x4c03c0c111a49d608988bc681b1c28efe22f4e2f7551048a5747e889a98106c1\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/dapp/IApplication.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {IERC1155Receiver} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\nimport {IConsensus} from \\\"../consensus/IConsensus.sol\\\";\\nimport {IInputBox} from \\\"../inputs/IInputBox.sol\\\";\\nimport {IInputRelay} from \\\"../inputs/IInputRelay.sol\\\";\\nimport {OutputValidityProof} from \\\"../common/OutputValidityProof.sol\\\";\\nimport {Proof} from \\\"../common/Proof.sol\\\";\\nimport {InputRange} from \\\"../common/InputRange.sol\\\";\\n\\n/// @title Application interface\\ninterface IApplication is IERC721Receiver, IERC1155Receiver {\\n    // Errors\\n\\n    /// @notice Could not validate an output because\\n    /// the input that generated it is outside the given input range.\\n    /// @param inputIndex The input index\\n    /// @param inputRange The input range\\n    error InputIndexOutOfRange(uint256 inputIndex, InputRange inputRange);\\n\\n    // Events\\n\\n    /// @notice The application has migrated to another consensus contract.\\n    /// @param newConsensus The new consensus contract\\n    /// @dev MUST be triggered on a successful call to `migrateToConsensus`.\\n    event NewConsensus(IConsensus newConsensus);\\n\\n    /// @notice A voucher was executed from the application.\\n    /// @param inputIndex The index of the input that emitted the voucher\\n    /// @param outputIndexWithinInput The index of the voucher amongst all outputs emitted by the input\\n    event VoucherExecuted(uint256 inputIndex, uint256 outputIndexWithinInput);\\n\\n    // Permissioned functions\\n\\n    /// @notice Migrate the application to a new consensus.\\n    /// @param _newConsensus The new consensus\\n    /// @dev Can only be called by the application owner.\\n    function migrateToConsensus(IConsensus _newConsensus) external;\\n\\n    // Permissionless functions\\n\\n    /// @notice Try to execute a voucher.\\n    /// Reverts if the proof is invalid.\\n    /// Reverts if the voucher was already successfully executed.\\n    /// Propagates any error raised by the low-level call.\\n    /// @param _destination The address that will receive the payload through a message call\\n    /// @param _payload The payload, which\\u2014in the case of Solidity contracts\\u2014encodes a function call\\n    /// @param _proof The proof used to validate the voucher against\\n    ///               a claim submitted by the current consensus contract\\n    /// @dev On a successful execution, emits a `VoucherExecuted` event.\\n    function executeVoucher(\\n        address _destination,\\n        bytes calldata _payload,\\n        Proof calldata _proof\\n    ) external;\\n\\n    /// @notice Check whether a voucher has been executed.\\n    /// @param _inputIndex The index of the input in the input box\\n    /// @param _outputIndexWithinInput The index of output emitted by the input\\n    /// @return Whether the voucher has been executed before\\n    function wasVoucherExecuted(\\n        uint256 _inputIndex,\\n        uint256 _outputIndexWithinInput\\n    ) external view returns (bool);\\n\\n    /// @notice Validate a notice.\\n    /// Reverts if the proof is invalid.\\n    /// @param _notice The notice\\n    /// @param _proof The proof used to validate the notice against\\n    ///               a claim submitted by the current consensus contract\\n    function validateNotice(\\n        bytes calldata _notice,\\n        Proof calldata _proof\\n    ) external view;\\n\\n    /// @notice Get the application's template hash.\\n    /// @return The application's template hash\\n    function getTemplateHash() external view returns (bytes32);\\n\\n    /// @notice Get the current consensus.\\n    /// @return The current consensus\\n    function getConsensus() external view returns (IConsensus);\\n\\n    /// @notice Get the input box that the application is listening to.\\n    /// @return The input box\\n    function getInputBox() external view returns (IInputBox);\\n\\n    /// @notice Get the input relays that the application expects inputs from.\\n    /// @return The input relays.\\n    function getInputRelays() external view returns (IInputRelay[] memory);\\n}\\n\",\"keccak256\":\"0x2a232065fac560fd546ce4ff4794e2c66eedef674c86d10af1d56b9ec515f821\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/dapp/IApplicationFactory.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {Application} from \\\"./Application.sol\\\";\\nimport {IConsensus} from \\\"../consensus/IConsensus.sol\\\";\\nimport {IInputBox} from \\\"../inputs/IInputBox.sol\\\";\\nimport {IInputRelay} from \\\"../inputs/IInputRelay.sol\\\";\\n\\n/// @title Application Factory interface\\ninterface IApplicationFactory {\\n    // Events\\n\\n    /// @notice A new application was deployed.\\n    /// @param consensus The initial consensus contract\\n    /// @param inputBox The input box contract\\n    /// @param inputRelays The input relays\\n    /// @param appOwner The initial application owner\\n    /// @param templateHash The initial machine state hash\\n    /// @param app The application\\n    /// @dev MUST be triggered on a successful call to `newApplication`.\\n    event ApplicationCreated(\\n        IConsensus indexed consensus,\\n        IInputBox inputBox,\\n        IInputRelay[] inputRelays,\\n        address appOwner,\\n        bytes32 templateHash,\\n        Application app\\n    );\\n\\n    // Permissionless functions\\n\\n    /// @notice Deploy a new application.\\n    /// @param _consensus The initial consensus contract\\n    /// @param _inputBox The input box contract\\n    /// @param _inputRelays The input relays\\n    /// @param _appOwner The initial application owner\\n    /// @param _templateHash The initial machine state hash\\n    /// @return The application\\n    /// @dev On success, MUST emit an `ApplicationCreated` event.\\n    function newApplication(\\n        IConsensus _consensus,\\n        IInputBox _inputBox,\\n        IInputRelay[] calldata _inputRelays,\\n        address _appOwner,\\n        bytes32 _templateHash\\n    ) external returns (Application);\\n\\n    /// @notice Deploy a new application deterministically.\\n    /// @param _consensus The initial consensus contract\\n    /// @param _inputBox The input box contract\\n    /// @param _inputRelays The input relays\\n    /// @param _appOwner The initial application owner\\n    /// @param _templateHash The initial machine state hash\\n    /// @param _salt The salt used to deterministically generate the application address\\n    /// @return The application\\n    /// @dev On success, MUST emit an `ApplicationCreated` event.\\n    function newApplication(\\n        IConsensus _consensus,\\n        IInputBox _inputBox,\\n        IInputRelay[] calldata _inputRelays,\\n        address _appOwner,\\n        bytes32 _templateHash,\\n        bytes32 _salt\\n    ) external returns (Application);\\n\\n    /// @notice Calculate the address of an application to be deployed deterministically.\\n    /// @param _consensus The initial consensus contract\\n    /// @param _inputBox The input box contract\\n    /// @param _inputRelays The input relays\\n    /// @param _appOwner The initial application owner\\n    /// @param _templateHash The initial machine state hash\\n    /// @param _salt The salt used to deterministically generate the application address\\n    /// @return The deterministic application address\\n    /// @dev Beware that only the `newApplication` function with the `_salt` parameter\\n    ///      is able to deterministically deploy an application.\\n    function calculateApplicationAddress(\\n        IConsensus _consensus,\\n        IInputBox _inputBox,\\n        IInputRelay[] calldata _inputRelays,\\n        address _appOwner,\\n        bytes32 _templateHash,\\n        bytes32 _salt\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0xc7a60a41bda81f2a1e1531108551aca016338d584f846875e8525a1a3a9f3eb3\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/inputs/IInputBox.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @title Input Box interface\\ninterface IInputBox {\\n    /// @notice Emitted when an input is added to an application's input box.\\n    /// @param app The address of the application\\n    /// @param inputIndex The index of the input in the input box\\n    /// @param sender The address that sent the input\\n    /// @param input The contents of the input\\n    /// @dev MUST be triggered on a successful call to `addInput`.\\n    event InputAdded(\\n        address indexed app,\\n        uint256 indexed inputIndex,\\n        address sender,\\n        bytes input\\n    );\\n\\n    /// @notice Add an input to an application's input box.\\n    /// @param _app The address of the application\\n    /// @param _input The contents of the input\\n    /// @return The hash of the input plus some extra metadata\\n    /// @dev MUST fire an `InputAdded` event accordingly.\\n    ///      Input larger than machine limit will raise `InputSizeExceedsLimit` error.\\n    function addInput(\\n        address _app,\\n        bytes calldata _input\\n    ) external returns (bytes32);\\n\\n    /// @notice Get the number of inputs in an application's input box.\\n    /// @param _app The address of the application\\n    /// @return Number of inputs in the application's input box\\n    function getNumberOfInputs(address _app) external view returns (uint256);\\n\\n    /// @notice Get the hash of an input in an application's input box.\\n    /// @param _app The address of the application\\n    /// @param _index The index of the input in the application's input box\\n    /// @return The hash of the input at the provided index in the application's input box\\n    /// @dev `_index` MUST be in the interval `[0,n)` where `n` is the number of\\n    ///      inputs in the application's input box. See the `getNumberOfInputs` function.\\n    function getInputHash(\\n        address _app,\\n        uint256 _index\\n    ) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x5545227421ef579ac471bb6e59c0dad5d2c8921648755059744b8fe7a7c5e015\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/inputs/IInputRelay.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {IInputBox} from \\\"./IInputBox.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title Input Relay interface\\ninterface IInputRelay is IERC165 {\\n    // Permissionless functions\\n\\n    /// @notice Get the input box used by this input relay.\\n    /// @return The input box\\n    function getInputBox() external view returns (IInputBox);\\n}\\n\",\"keccak256\":\"0xafbf09d560b4637bd65c75c76ad991e583523a60d1a1d8f4c7dd430a3a9f6cf2\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/library/LibInputRange.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {InputRange} from \\\"../common/InputRange.sol\\\";\\n\\nlibrary LibInputRange {\\n    /// @notice Check if an input range contains an input.\\n    /// @param r The input range\\n    /// @param inputIndex The input index\\n    /// @return Whether the input range contains the input.\\n    function contains(\\n        InputRange calldata r,\\n        uint256 inputIndex\\n    ) internal pure returns (bool) {\\n        return r.firstIndex <= inputIndex && inputIndex <= r.lastIndex;\\n    }\\n}\\n\",\"keccak256\":\"0x30e95c1eb8b8f45bf4bc02c26e2b69a949025fa1bb34cb804137d7e2d229aa78\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/library/LibOutputValidation.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {CanonicalMachine} from \\\"../common/CanonicalMachine.sol\\\";\\nimport {MerkleV2} from \\\"@cartesi/util/contracts/MerkleV2.sol\\\";\\nimport {OutputEncoding} from \\\"../common/OutputEncoding.sol\\\";\\nimport {OutputValidityProof} from \\\"../common/OutputValidityProof.sol\\\";\\n\\n/// @title Output Validation Library\\nlibrary LibOutputValidation {\\n    using CanonicalMachine for CanonicalMachine.Log2Size;\\n\\n    /// @notice Raised when some `OutputValidityProof` variables does not match\\n    ///         the presented finalized epoch.\\n    error IncorrectEpochHash();\\n\\n    /// @notice Raised when `OutputValidityProof` metadata memory range is NOT\\n    ///         contained in epoch's output memory range.\\n    error IncorrectOutputsEpochRootHash();\\n\\n    /// @notice Raised when Merkle root of output hash is NOT contained\\n    ///         in the output metadata array memory range.\\n    error IncorrectOutputHashesRootHash();\\n\\n    /// @notice Raised when epoch input index is NOT compatible with the\\n    ///         provided input index range.\\n    error InputIndexOutOfClaimBounds();\\n\\n    /// @notice Make sure the output proof is valid, otherwise revert.\\n    /// @param v The output validity proof\\n    /// @param encodedOutput The encoded output\\n    /// @param epochHash The hash of the epoch in which the output was generated\\n    /// @param outputsEpochRootHash Either `v.vouchersEpochRootHash` (for vouchers)\\n    ///                             or `v.noticesEpochRootHash` (for notices)\\n    /// @param outputEpochLog2Size Either `EPOCH_VOUCHER_LOG2_SIZE` (for vouchers)\\n    ///                            or `EPOCH_NOTICE_LOG2_SIZE` (for notices)\\n    /// @param outputHashesLog2Size Either `VOUCHER_METADATA_LOG2_SIZE` (for vouchers)\\n    ///                             or `NOTICE_METADATA_LOG2_SIZE` (for notices)\\n    function validateEncodedOutput(\\n        OutputValidityProof calldata v,\\n        bytes memory encodedOutput,\\n        bytes32 epochHash,\\n        bytes32 outputsEpochRootHash,\\n        uint256 outputEpochLog2Size,\\n        uint256 outputHashesLog2Size\\n    ) internal pure {\\n        // prove that outputs hash is represented in a finalized epoch\\n        if (\\n            keccak256(\\n                abi.encodePacked(\\n                    v.vouchersEpochRootHash,\\n                    v.noticesEpochRootHash,\\n                    v.machineStateHash\\n                )\\n            ) != epochHash\\n        ) {\\n            revert IncorrectEpochHash();\\n        }\\n\\n        // prove that output metadata memory range is contained in epoch's output memory range\\n        if (\\n            MerkleV2.getRootAfterReplacementInDrive(\\n                CanonicalMachine.getIntraMemoryRangePosition(\\n                    v.inputIndexWithinEpoch,\\n                    CanonicalMachine.KECCAK_LOG2_SIZE\\n                ),\\n                CanonicalMachine.KECCAK_LOG2_SIZE.uint64OfSize(),\\n                outputEpochLog2Size,\\n                v.outputHashesRootHash,\\n                v.outputHashesInEpochSiblings\\n            ) != outputsEpochRootHash\\n        ) {\\n            revert IncorrectOutputsEpochRootHash();\\n        }\\n\\n        // The hash of the output is converted to bytes (abi.encode) and\\n        // treated as data. The metadata output memory range stores that data while\\n        // being indifferent to its contents. To prove that the received\\n        // output is contained in the metadata output memory range we need to\\n        // prove that x, where:\\n        // x = keccak(\\n        //          keccak(\\n        //              keccak(hashOfOutput[0:7]),\\n        //              keccak(hashOfOutput[8:15])\\n        //          ),\\n        //          keccak(\\n        //              keccak(hashOfOutput[16:23]),\\n        //              keccak(hashOfOutput[24:31])\\n        //          )\\n        //     )\\n        // is contained in it. We can't simply use hashOfOutput because the\\n        // log2size of the leaf is three (8 bytes) not  five (32 bytes)\\n        bytes32 merkleRootOfHashOfOutput = MerkleV2.getMerkleRootFromBytes(\\n            abi.encodePacked(keccak256(encodedOutput)),\\n            CanonicalMachine.KECCAK_LOG2_SIZE.uint64OfSize()\\n        );\\n\\n        // prove that Merkle root of bytes(hashOfOutput) is contained\\n        // in the output metadata array memory range\\n        if (\\n            MerkleV2.getRootAfterReplacementInDrive(\\n                CanonicalMachine.getIntraMemoryRangePosition(\\n                    v.outputIndexWithinInput,\\n                    CanonicalMachine.KECCAK_LOG2_SIZE\\n                ),\\n                CanonicalMachine.KECCAK_LOG2_SIZE.uint64OfSize(),\\n                outputHashesLog2Size,\\n                merkleRootOfHashOfOutput,\\n                v.outputHashInOutputHashesSiblings\\n            ) != v.outputHashesRootHash\\n        ) {\\n            revert IncorrectOutputHashesRootHash();\\n        }\\n    }\\n\\n    /// @notice Make sure the output proof is valid, otherwise revert.\\n    /// @param v The output validity proof\\n    /// @param destination The address that will receive the payload through a message call\\n    /// @param payload The payload, which\\u2014in the case of Solidity contracts\\u2014encodes a function call\\n    /// @param epochHash The hash of the epoch in which the output was generated\\n    function validateVoucher(\\n        OutputValidityProof calldata v,\\n        address destination,\\n        bytes calldata payload,\\n        bytes32 epochHash\\n    ) internal pure {\\n        bytes memory encodedVoucher = OutputEncoding.encodeVoucher(\\n            destination,\\n            payload\\n        );\\n        validateEncodedOutput(\\n            v,\\n            encodedVoucher,\\n            epochHash,\\n            v.vouchersEpochRootHash,\\n            CanonicalMachine.EPOCH_VOUCHER_LOG2_SIZE.uint64OfSize(),\\n            CanonicalMachine.VOUCHER_METADATA_LOG2_SIZE.uint64OfSize()\\n        );\\n    }\\n\\n    /// @notice Make sure the output proof is valid, otherwise revert.\\n    /// @param v The output validity proof\\n    /// @param notice The notice\\n    /// @param epochHash The hash of the epoch in which the output was generated\\n    function validateNotice(\\n        OutputValidityProof calldata v,\\n        bytes calldata notice,\\n        bytes32 epochHash\\n    ) internal pure {\\n        bytes memory encodedNotice = OutputEncoding.encodeNotice(notice);\\n        validateEncodedOutput(\\n            v,\\n            encodedNotice,\\n            epochHash,\\n            v.noticesEpochRootHash,\\n            CanonicalMachine.EPOCH_NOTICE_LOG2_SIZE.uint64OfSize(),\\n            CanonicalMachine.NOTICE_METADATA_LOG2_SIZE.uint64OfSize()\\n        );\\n    }\\n\\n    /// @notice Validate input index range and get the input index.\\n    /// @param v The output validity proof\\n    /// @param firstInputIndex The index of the first input of the epoch in the input box\\n    /// @param lastInputIndex The index of the last input of the epoch in the input box\\n    /// @return The index of the input in the application's input box\\n    /// @dev Reverts if epoch input index is not compatible with the provided input index range.\\n    function validateInputIndexRange(\\n        OutputValidityProof calldata v,\\n        uint256 firstInputIndex,\\n        uint256 lastInputIndex\\n    ) internal pure returns (uint256) {\\n        uint256 inputIndex = firstInputIndex + v.inputIndexWithinEpoch;\\n\\n        if (inputIndex > lastInputIndex) {\\n            revert InputIndexOutOfClaimBounds();\\n        }\\n\\n        return inputIndex;\\n    }\\n}\\n\",\"keccak256\":\"0xc2133a900722ffeb6c771ea3c8faf186e0548878fe92924ec318b7a766fcafd9\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/library/LibProof.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {Proof} from \\\"../common/Proof.sol\\\";\\n\\nlibrary LibProof {\\n    function calculateInputIndex(\\n        Proof calldata proof\\n    ) internal pure returns (uint256 inputIndex) {\\n        inputIndex =\\n            proof.inputRange.firstIndex +\\n            proof.validity.inputIndexWithinEpoch;\\n    }\\n}\\n\",\"keccak256\":\"0x994c22e06d4d8cd0b620260945f14807913193570e55e19ad6ff2c42e5d88f35\",\"license\":\"Apache-2.0 (see LICENSE)\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611e61806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620000465760003560e01c806303557d67146200004b5780635c44eda4146200007e578063f63adead1462000095575b600080fd5b620000626200005c366004620003aa565b620000ac565b6040516001600160a01b03909116815260200160405180910390f35b620000626200008f3660046200043b565b6200014d565b62000062620000a6366004620003aa565b620001e8565b600080828888888888604051620000c390620002b5565b620000d395949392919062000509565b8190604051809103906000f5905080158015620000f4573d6000803e3d6000fd5b509050876001600160a01b03167ff0a2d32dae19c50fb841822aba94a3a9ba00be0584f7d8229795d66d9532395288888888866040516200013a95949392919062000548565b60405180910390a2979650505050505050565b60008086868686866040516200016390620002b5565b6200017395949392919062000509565b604051809103906000f08015801562000190573d6000803e3d6000fd5b509050866001600160a01b03167ff0a2d32dae19c50fb841822aba94a3a9ba00be0584f7d8229795d66d953239528787878786604051620001d695949392919062000548565b60405180910390a29695505050505050565b60006200026a82604051806020016200020190620002b5565b601f1982820381018352601f9091011660408190526200022e908b908b908b908b908b9060200162000509565b60408051601f19818403018152908290526200024e9291602001620005bd565b6040516020818303038152906040528051906020012062000275565b979650505050505050565b6000620002848383306200028b565b9392505050565b6000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b61184d80620005df83390190565b6001600160a01b0381168114620002d957600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b8035620002ff81620002c3565b919050565b600082601f8301126200031657600080fd5b8135602067ffffffffffffffff80831115620003365762000336620002dc565b8260051b604051601f19603f830116810181811084821117156200035e576200035e620002dc565b60405293845260208187018101949081019250878511156200037f57600080fd5b6020870191505b848210156200026a576200039a82620002f2565b8352918301919083019062000386565b60008060008060008060c08789031215620003c457600080fd5b8635620003d181620002c3565b95506020870135620003e381620002c3565b9450604087013567ffffffffffffffff8111156200040057600080fd5b6200040e89828a0162000304565b94505060608701356200042181620002c3565b9598949750929560808101359460a0909101359350915050565b600080600080600060a086880312156200045457600080fd5b85356200046181620002c3565b945060208601356200047381620002c3565b9350604086013567ffffffffffffffff8111156200049057600080fd5b6200049e8882890162000304565b9350506060860135620004b181620002c3565b949793965091946080013592915050565b60008151808452602080850194506020840160005b83811015620004fe5781516001600160a01b031687529582019590820190600101620004d7565b509495945050505050565b600060018060a01b038088168352808716602084015260a060408401526200053560a0840187620004c2565b9416606083015250608001529392505050565b600060018060a01b03808816835260a060208401526200056c60a0840188620004c2565b9581166040840152606083019490945250911660809091015292915050565b6000815160005b81811015620005ae576020818501810151868301520162000592565b50600093019283525090919050565b6000620005d6620005cf83866200058b565b846200058b565b94935050505056fe60c06040523480156200001157600080fd5b506040516200184d3803806200184d8339810160408190526200003491620001a5565b816001600160a01b0381166200006457604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200006f8162000114565b50600180556080819052600380546001600160a01b0319166001600160a01b0387811691909117909155841660a05260005b835181101562000108576004848281518110620000c257620000c2620002c2565b60209081029190910181015182546001808201855560009485529290932090920180546001600160a01b0319166001600160a01b039093169290921790915501620000a1565b505050505050620002d8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200017a57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b8051620001a08162000164565b919050565b600080600080600060a08688031215620001be57600080fd5b8551620001cb8162000164565b80955050602080870151620001e08162000164565b60408801519095506001600160401b0380821115620001fe57600080fd5b818901915089601f8301126200021357600080fd5b8151818111156200022857620002286200017d565b8060051b604051601f19603f830116810181811085821117156200025057620002506200017d565b60405291825284820192508381018501918c8311156200026f57600080fd5b938501935b828510156200029857620002888562000193565b8452938501939285019262000274565b809850505050505050620002af6060870162000193565b9150608086015190509295509295909350565b634e487b7160e01b600052603260045260246000fd5b60805160a05161154f620002fe600039600061011101526000610214015261154f6000f3fe6080604052600436106100f65760003560e01c80639d9b11451161008a578063e2931e3911610059578063e2931e39146102fe578063f23a6e611461031e578063f2fde38b1461034a578063fc4116831461036a57600080fd5b80639d9b114514610270578063a9074af114610290578063bc197c81146102b0578063c01ff31a146102dc57600080fd5b8063522f6815116100c6578063522f6815146101e057806361b12c6614610202578063715018a61461023d5780638da5cb5b1461025257600080fd5b8062aace9a1461010257806301ffc9a71461014e578063150b7a021461017e578063179e740b146101c257600080fd5b366100fd57005b600080fd5b34801561010e57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020015b60405180910390f35b34801561015a57600080fd5b5061016e610169366004610dd6565b61038a565b6040519015158152602001610145565b34801561018a57600080fd5b506101a9610199366004610eca565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610145565b3480156101ce57600080fd5b506003546001600160a01b0316610131565b3480156101ec57600080fd5b506102006101fb366004610f35565b6103d0565b005b34801561020e57600080fd5b506040517f00000000000000000000000000000000000000000000000000000000000000008152602001610145565b34801561024957600080fd5b50610200610469565b34801561025e57600080fd5b506000546001600160a01b0316610131565b34801561027c57600080fd5b5061016e61028b366004610f61565b61047d565b34801561029c57600080fd5b506102006102ab366004610fe3565b6104ad565b3480156102bc57600080fd5b506101a96102cb3660046110d1565b63bc197c8160e01b95945050505050565b3480156102e857600080fd5b506102f161064c565b604051610145919061117e565b34801561030a57600080fd5b506102006103193660046111cb565b6106ae565b34801561032a57600080fd5b506101a9610339366004611233565b63f23a6e6160e01b95945050505050565b34801561035657600080fd5b5061020061036536600461129b565b61071b565b34801561037657600080fd5b5061020061038536600461129b565b610759565b60006001600160e01b03198216639cd436e360e01b14806103bb57506001600160e01b03198216630a85bd0160e11b145b806103ca57506103ca826107b5565b92915050565b3330146103f0576040516377c1cb9760e11b815260040160405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461043d576040519150601f19603f3d011682016040523d82523d6000602084013e610442565b606091505b505090508061046457604051630ce8f45160e31b815260040160405180910390fd5b505050565b6104716107ea565b61047b6000610817565b565b6000818152600260209081526040808320600886901c8452909152812054600160ff85161b1615155b9392505050565b6104b5610867565b60006104c082610891565b90506104cf60208301826108c2565b6104fc5780826020016040516369b67d4560e01b81526004016104f39291906112b8565b60405180910390fd5b600061050a836020016108dc565b90506105268686868461051d88806112d6565b93929190610950565b600061053284806112d6565b6105439060408101906020016112f6565b6001600160401b03166000818152600260209081526040808320600888901c8452918290529091205491925090600160ff86161b1615610596576040516370de22b760e01b815260040160405180910390fd5b6105e087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506001600160a01b038c1692915050610985565b50600884901c60009081526020829052604090208054600160ff87161b17905560408051858152602081018490527fd1d262d5155c48b95c6da18eee621c3c67e223cee01c3db82b04f96110b4e657910160405180910390a15050505061064660018055565b50505050565b606060048054806020026020016040519081016040528092919081815260200182805480156106a457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610686575b5050505050905090565b60006106b982610891565b90506106c860208301826108c2565b6106ec5780826020016040516369b67d4560e01b81526004016104f39291906112b8565b60006106fa836020016108dc565b905061071485858361070c87806112d6565b929190610993565b5050505050565b6107236107ea565b6001600160a01b03811661074d57604051631e4fbdf760e01b8152600060048201526024016104f3565b61075681610817565b50565b6107616107ea565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527f4991c6f37185659e276ff918a96f3e20e6c5abcd8c9aab450dc19c2f7ad35cb59060200160405180910390a150565b60006001600160e01b03198216630271189760e51b14806103ca57506301ffc9a760e01b6001600160e01b03198316146103ca565b6000546001600160a01b0316331461047b5760405163118cdaa760e01b81523360048201526024016104f3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60026001540361088a57604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b600061089d82806112d6565b6108ab9060208101906112f6565b6103ca906001600160401b0316602084013561131f565b6000823582108015906104a6575050602090910135101590565b600354604051633942924360e01b81526000916001600160a01b03169063394292439061090f9030908690600401611340565b602060405180830381865afa15801561092c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ca9190611367565b600061095d8585856109b3565b905061097d868284606083013560255b6001600160401b031660156109e2565b505050505050565b60606104a683836000610c88565b600061099f8484610d25565b90506107148582846080830135602561096d565b60608383836040516020016109ca939291906113a9565b60405160208183030381529060405290509392505050565b6040805160608089013560208301526080808a01359383019390935260a0890135908201528591016040516020818303038152906040528051906020012014610a3e57604051636fbd3b7160e11b815260040160405180910390fd5b827333436035441927Df1a73FE3AAC5906854632e53d6379de4601610a7a610a6960208b018b6112f6565b60051b681fffffffffffffffe01690565b60058660408c0135610a8f60e08e018e6113d7565b6040518763ffffffff1660e01b8152600401610ab096959493929190611420565b602060405180830381865af4158015610acd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af19190611367565b14610b0f57604051634371daa160e11b815260040160405180910390fd5b60007333436035441927Df1a73FE3AAC5906854632e53d63c84583a18780519060200120604051602001610b4591815260200190565b60408051601f19818403018152908290526001600160e01b031960e084901b168252610b76916005906004016114a7565b602060405180830381865af4158015610b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb79190611367565b905086604001357333436035441927Df1a73FE3AAC5906854632e53d6379de4601610bee8a6020016020810190610a6991906112f6565b60058686610bff60c08f018f6113d7565b6040518763ffffffff1660e01b8152600401610c2096959493929190611420565b602060405180830381865af4158015610c3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c619190611367565b14610c7f5760405163017c689560e61b815260040160405180910390fd5b50505050505050565b606081471015610cad5760405163cd78605960e01b81523060048201526024016104f3565b600080856001600160a01b03168486604051610cc991906114eb565b60006040518083038185875af1925050503d8060008114610d06576040519150601f19603f3d011682016040523d82523d6000602084013e610d0b565b606091505b5091509150610d1b868383610d51565b9695505050505050565b60608282604051602001610d3a9291906114fd565b604051602081830303815290604052905092915050565b606082610d6657610d6182610dad565b6104a6565b8151158015610d7d57506001600160a01b0384163b155b15610da657604051639996b31560e01b81526001600160a01b03851660048201526024016104f3565b50806104a6565b805115610dbd5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b600060208284031215610de857600080fd5b81356001600160e01b0319811681146104a657600080fd5b6001600160a01b038116811461075657600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715610e5357610e53610e15565b604052919050565b600082601f830112610e6c57600080fd5b81356001600160401b03811115610e8557610e85610e15565b610e98601f8201601f1916602001610e2b565b818152846020838601011115610ead57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215610ee057600080fd5b8435610eeb81610e00565b93506020850135610efb81610e00565b92506040850135915060608501356001600160401b03811115610f1d57600080fd5b610f2987828801610e5b565b91505092959194509250565b60008060408385031215610f4857600080fd5b8235610f5381610e00565b946020939093013593505050565b60008060408385031215610f7457600080fd5b50508035926020909101359150565b60008083601f840112610f9557600080fd5b5081356001600160401b03811115610fac57600080fd5b602083019150836020828501011115610fc457600080fd5b9250929050565b600060608284031215610fdd57600080fd5b50919050565b60008060008060608587031215610ff957600080fd5b843561100481610e00565b935060208501356001600160401b038082111561102057600080fd5b61102c88838901610f83565b9095509350604087013591508082111561104557600080fd5b50610f2987828801610fcb565b600082601f83011261106357600080fd5b813560206001600160401b0382111561107e5761107e610e15565b8160051b61108d828201610e2b565b92835284810182019282810190878511156110a757600080fd5b83870192505b848310156110c6578235825291830191908301906110ad565b979650505050505050565b600080600080600060a086880312156110e957600080fd5b85356110f481610e00565b9450602086013561110481610e00565b935060408601356001600160401b038082111561112057600080fd5b61112c89838a01611052565b9450606088013591508082111561114257600080fd5b61114e89838a01611052565b9350608088013591508082111561116457600080fd5b5061117188828901610e5b565b9150509295509295909350565b6020808252825182820181905260009190848201906040850190845b818110156111bf5783516001600160a01b03168352928401929184019160010161119a565b50909695505050505050565b6000806000604084860312156111e057600080fd5b83356001600160401b03808211156111f757600080fd5b61120387838801610f83565b9095509350602086013591508082111561121c57600080fd5b5061122986828701610fcb565b9150509250925092565b600080600080600060a0868803121561124b57600080fd5b853561125681610e00565b9450602086013561126681610e00565b9350604086013592506060860135915060808601356001600160401b0381111561128f57600080fd5b61117188828901610e5b565b6000602082840312156112ad57600080fd5b81356104a681610e00565b828152606081016104a6602083018480358252602090810135910152565b6000823560fe198336030181126112ec57600080fd5b9190910192915050565b60006020828403121561130857600080fd5b81356001600160401b03811681146104a657600080fd5b808201808211156103ca57634e487b7160e01b600052601160045260246000fd5b6001600160a01b0383168152606081016104a6602083018480358252602090810135910152565b60006020828403121561137957600080fd5b5051919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b03841681526040602082018190526000906113ce9083018486611380565b95945050505050565b6000808335601e198436030181126113ee57600080fd5b8301803591506001600160401b0382111561140857600080fd5b6020019150600581901b3603821315610fc457600080fd5b6001600160401b03878116825286166020820152604081018590526060810184905260a060808201819052810182905260006001600160fb1b0383111561146657600080fd5b8260051b808560c08501379190910160c001979650505050505050565b60005b8381101561149e578181015183820152602001611486565b50506000910152565b60408152600083518060408401526114c6816060850160208801611483565b6001600160401b0393909316602083015250601f91909101601f191601606001919050565b600082516112ec818460208701611483565b602081526000611511602083018486611380565b94935050505056fea26469706673582212207ed46b7f141142ddd60aaf582ba51961f96984a2ec68dc4d12c462bc20a32f9164736f6c63430008170033a2646970667358221220a9a29855c8c2a69b12eea5b4a77a92ab918dbe7e19eb0eccda38704c574a1e8664736f6c63430008170033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000465760003560e01c806303557d67146200004b5780635c44eda4146200007e578063f63adead1462000095575b600080fd5b620000626200005c366004620003aa565b620000ac565b6040516001600160a01b03909116815260200160405180910390f35b620000626200008f3660046200043b565b6200014d565b62000062620000a6366004620003aa565b620001e8565b600080828888888888604051620000c390620002b5565b620000d395949392919062000509565b8190604051809103906000f5905080158015620000f4573d6000803e3d6000fd5b509050876001600160a01b03167ff0a2d32dae19c50fb841822aba94a3a9ba00be0584f7d8229795d66d9532395288888888866040516200013a95949392919062000548565b60405180910390a2979650505050505050565b60008086868686866040516200016390620002b5565b6200017395949392919062000509565b604051809103906000f08015801562000190573d6000803e3d6000fd5b509050866001600160a01b03167ff0a2d32dae19c50fb841822aba94a3a9ba00be0584f7d8229795d66d953239528787878786604051620001d695949392919062000548565b60405180910390a29695505050505050565b60006200026a82604051806020016200020190620002b5565b601f1982820381018352601f9091011660408190526200022e908b908b908b908b908b9060200162000509565b60408051601f19818403018152908290526200024e9291602001620005bd565b6040516020818303038152906040528051906020012062000275565b979650505050505050565b6000620002848383306200028b565b9392505050565b6000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b61184d80620005df83390190565b6001600160a01b0381168114620002d957600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b8035620002ff81620002c3565b919050565b600082601f8301126200031657600080fd5b8135602067ffffffffffffffff80831115620003365762000336620002dc565b8260051b604051601f19603f830116810181811084821117156200035e576200035e620002dc565b60405293845260208187018101949081019250878511156200037f57600080fd5b6020870191505b848210156200026a576200039a82620002f2565b8352918301919083019062000386565b60008060008060008060c08789031215620003c457600080fd5b8635620003d181620002c3565b95506020870135620003e381620002c3565b9450604087013567ffffffffffffffff8111156200040057600080fd5b6200040e89828a0162000304565b94505060608701356200042181620002c3565b9598949750929560808101359460a0909101359350915050565b600080600080600060a086880312156200045457600080fd5b85356200046181620002c3565b945060208601356200047381620002c3565b9350604086013567ffffffffffffffff8111156200049057600080fd5b6200049e8882890162000304565b9350506060860135620004b181620002c3565b949793965091946080013592915050565b60008151808452602080850194506020840160005b83811015620004fe5781516001600160a01b031687529582019590820190600101620004d7565b509495945050505050565b600060018060a01b038088168352808716602084015260a060408401526200053560a0840187620004c2565b9416606083015250608001529392505050565b600060018060a01b03808816835260a060208401526200056c60a0840188620004c2565b9581166040840152606083019490945250911660809091015292915050565b6000815160005b81811015620005ae576020818501810151868301520162000592565b50600093019283525090919050565b6000620005d6620005cf83866200058b565b846200058b565b94935050505056fe60c06040523480156200001157600080fd5b506040516200184d3803806200184d8339810160408190526200003491620001a5565b816001600160a01b0381166200006457604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200006f8162000114565b50600180556080819052600380546001600160a01b0319166001600160a01b0387811691909117909155841660a05260005b835181101562000108576004848281518110620000c257620000c2620002c2565b60209081029190910181015182546001808201855560009485529290932090920180546001600160a01b0319166001600160a01b039093169290921790915501620000a1565b505050505050620002d8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200017a57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b8051620001a08162000164565b919050565b600080600080600060a08688031215620001be57600080fd5b8551620001cb8162000164565b80955050602080870151620001e08162000164565b60408801519095506001600160401b0380821115620001fe57600080fd5b818901915089601f8301126200021357600080fd5b8151818111156200022857620002286200017d565b8060051b604051601f19603f830116810181811085821117156200025057620002506200017d565b60405291825284820192508381018501918c8311156200026f57600080fd5b938501935b828510156200029857620002888562000193565b8452938501939285019262000274565b809850505050505050620002af6060870162000193565b9150608086015190509295509295909350565b634e487b7160e01b600052603260045260246000fd5b60805160a05161154f620002fe600039600061011101526000610214015261154f6000f3fe6080604052600436106100f65760003560e01c80639d9b11451161008a578063e2931e3911610059578063e2931e39146102fe578063f23a6e611461031e578063f2fde38b1461034a578063fc4116831461036a57600080fd5b80639d9b114514610270578063a9074af114610290578063bc197c81146102b0578063c01ff31a146102dc57600080fd5b8063522f6815116100c6578063522f6815146101e057806361b12c6614610202578063715018a61461023d5780638da5cb5b1461025257600080fd5b8062aace9a1461010257806301ffc9a71461014e578063150b7a021461017e578063179e740b146101c257600080fd5b366100fd57005b600080fd5b34801561010e57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020015b60405180910390f35b34801561015a57600080fd5b5061016e610169366004610dd6565b61038a565b6040519015158152602001610145565b34801561018a57600080fd5b506101a9610199366004610eca565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610145565b3480156101ce57600080fd5b506003546001600160a01b0316610131565b3480156101ec57600080fd5b506102006101fb366004610f35565b6103d0565b005b34801561020e57600080fd5b506040517f00000000000000000000000000000000000000000000000000000000000000008152602001610145565b34801561024957600080fd5b50610200610469565b34801561025e57600080fd5b506000546001600160a01b0316610131565b34801561027c57600080fd5b5061016e61028b366004610f61565b61047d565b34801561029c57600080fd5b506102006102ab366004610fe3565b6104ad565b3480156102bc57600080fd5b506101a96102cb3660046110d1565b63bc197c8160e01b95945050505050565b3480156102e857600080fd5b506102f161064c565b604051610145919061117e565b34801561030a57600080fd5b506102006103193660046111cb565b6106ae565b34801561032a57600080fd5b506101a9610339366004611233565b63f23a6e6160e01b95945050505050565b34801561035657600080fd5b5061020061036536600461129b565b61071b565b34801561037657600080fd5b5061020061038536600461129b565b610759565b60006001600160e01b03198216639cd436e360e01b14806103bb57506001600160e01b03198216630a85bd0160e11b145b806103ca57506103ca826107b5565b92915050565b3330146103f0576040516377c1cb9760e11b815260040160405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461043d576040519150601f19603f3d011682016040523d82523d6000602084013e610442565b606091505b505090508061046457604051630ce8f45160e31b815260040160405180910390fd5b505050565b6104716107ea565b61047b6000610817565b565b6000818152600260209081526040808320600886901c8452909152812054600160ff85161b1615155b9392505050565b6104b5610867565b60006104c082610891565b90506104cf60208301826108c2565b6104fc5780826020016040516369b67d4560e01b81526004016104f39291906112b8565b60405180910390fd5b600061050a836020016108dc565b90506105268686868461051d88806112d6565b93929190610950565b600061053284806112d6565b6105439060408101906020016112f6565b6001600160401b03166000818152600260209081526040808320600888901c8452918290529091205491925090600160ff86161b1615610596576040516370de22b760e01b815260040160405180910390fd5b6105e087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506001600160a01b038c1692915050610985565b50600884901c60009081526020829052604090208054600160ff87161b17905560408051858152602081018490527fd1d262d5155c48b95c6da18eee621c3c67e223cee01c3db82b04f96110b4e657910160405180910390a15050505061064660018055565b50505050565b606060048054806020026020016040519081016040528092919081815260200182805480156106a457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610686575b5050505050905090565b60006106b982610891565b90506106c860208301826108c2565b6106ec5780826020016040516369b67d4560e01b81526004016104f39291906112b8565b60006106fa836020016108dc565b905061071485858361070c87806112d6565b929190610993565b5050505050565b6107236107ea565b6001600160a01b03811661074d57604051631e4fbdf760e01b8152600060048201526024016104f3565b61075681610817565b50565b6107616107ea565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527f4991c6f37185659e276ff918a96f3e20e6c5abcd8c9aab450dc19c2f7ad35cb59060200160405180910390a150565b60006001600160e01b03198216630271189760e51b14806103ca57506301ffc9a760e01b6001600160e01b03198316146103ca565b6000546001600160a01b0316331461047b5760405163118cdaa760e01b81523360048201526024016104f3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60026001540361088a57604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b600061089d82806112d6565b6108ab9060208101906112f6565b6103ca906001600160401b0316602084013561131f565b6000823582108015906104a6575050602090910135101590565b600354604051633942924360e01b81526000916001600160a01b03169063394292439061090f9030908690600401611340565b602060405180830381865afa15801561092c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ca9190611367565b600061095d8585856109b3565b905061097d868284606083013560255b6001600160401b031660156109e2565b505050505050565b60606104a683836000610c88565b600061099f8484610d25565b90506107148582846080830135602561096d565b60608383836040516020016109ca939291906113a9565b60405160208183030381529060405290509392505050565b6040805160608089013560208301526080808a01359383019390935260a0890135908201528591016040516020818303038152906040528051906020012014610a3e57604051636fbd3b7160e11b815260040160405180910390fd5b8273__$2a7ef22e717e9afc55afc95d018bf1a85b$__6379de4601610a7a610a6960208b018b6112f6565b60051b681fffffffffffffffe01690565b60058660408c0135610a8f60e08e018e6113d7565b6040518763ffffffff1660e01b8152600401610ab096959493929190611420565b602060405180830381865af4158015610acd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af19190611367565b14610b0f57604051634371daa160e11b815260040160405180910390fd5b600073__$2a7ef22e717e9afc55afc95d018bf1a85b$__63c84583a18780519060200120604051602001610b4591815260200190565b60408051601f19818403018152908290526001600160e01b031960e084901b168252610b76916005906004016114a7565b602060405180830381865af4158015610b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb79190611367565b9050866040013573__$2a7ef22e717e9afc55afc95d018bf1a85b$__6379de4601610bee8a6020016020810190610a6991906112f6565b60058686610bff60c08f018f6113d7565b6040518763ffffffff1660e01b8152600401610c2096959493929190611420565b602060405180830381865af4158015610c3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c619190611367565b14610c7f5760405163017c689560e61b815260040160405180910390fd5b50505050505050565b606081471015610cad5760405163cd78605960e01b81523060048201526024016104f3565b600080856001600160a01b03168486604051610cc991906114eb565b60006040518083038185875af1925050503d8060008114610d06576040519150601f19603f3d011682016040523d82523d6000602084013e610d0b565b606091505b5091509150610d1b868383610d51565b9695505050505050565b60608282604051602001610d3a9291906114fd565b604051602081830303815290604052905092915050565b606082610d6657610d6182610dad565b6104a6565b8151158015610d7d57506001600160a01b0384163b155b15610da657604051639996b31560e01b81526001600160a01b03851660048201526024016104f3565b50806104a6565b805115610dbd5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b600060208284031215610de857600080fd5b81356001600160e01b0319811681146104a657600080fd5b6001600160a01b038116811461075657600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715610e5357610e53610e15565b604052919050565b600082601f830112610e6c57600080fd5b81356001600160401b03811115610e8557610e85610e15565b610e98601f8201601f1916602001610e2b565b818152846020838601011115610ead57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215610ee057600080fd5b8435610eeb81610e00565b93506020850135610efb81610e00565b92506040850135915060608501356001600160401b03811115610f1d57600080fd5b610f2987828801610e5b565b91505092959194509250565b60008060408385031215610f4857600080fd5b8235610f5381610e00565b946020939093013593505050565b60008060408385031215610f7457600080fd5b50508035926020909101359150565b60008083601f840112610f9557600080fd5b5081356001600160401b03811115610fac57600080fd5b602083019150836020828501011115610fc457600080fd5b9250929050565b600060608284031215610fdd57600080fd5b50919050565b60008060008060608587031215610ff957600080fd5b843561100481610e00565b935060208501356001600160401b038082111561102057600080fd5b61102c88838901610f83565b9095509350604087013591508082111561104557600080fd5b50610f2987828801610fcb565b600082601f83011261106357600080fd5b813560206001600160401b0382111561107e5761107e610e15565b8160051b61108d828201610e2b565b92835284810182019282810190878511156110a757600080fd5b83870192505b848310156110c6578235825291830191908301906110ad565b979650505050505050565b600080600080600060a086880312156110e957600080fd5b85356110f481610e00565b9450602086013561110481610e00565b935060408601356001600160401b038082111561112057600080fd5b61112c89838a01611052565b9450606088013591508082111561114257600080fd5b61114e89838a01611052565b9350608088013591508082111561116457600080fd5b5061117188828901610e5b565b9150509295509295909350565b6020808252825182820181905260009190848201906040850190845b818110156111bf5783516001600160a01b03168352928401929184019160010161119a565b50909695505050505050565b6000806000604084860312156111e057600080fd5b83356001600160401b03808211156111f757600080fd5b61120387838801610f83565b9095509350602086013591508082111561121c57600080fd5b5061122986828701610fcb565b9150509250925092565b600080600080600060a0868803121561124b57600080fd5b853561125681610e00565b9450602086013561126681610e00565b9350604086013592506060860135915060808601356001600160401b0381111561128f57600080fd5b61117188828901610e5b565b6000602082840312156112ad57600080fd5b81356104a681610e00565b828152606081016104a6602083018480358252602090810135910152565b6000823560fe198336030181126112ec57600080fd5b9190910192915050565b60006020828403121561130857600080fd5b81356001600160401b03811681146104a657600080fd5b808201808211156103ca57634e487b7160e01b600052601160045260246000fd5b6001600160a01b0383168152606081016104a6602083018480358252602090810135910152565b60006020828403121561137957600080fd5b5051919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b03841681526040602082018190526000906113ce9083018486611380565b95945050505050565b6000808335601e198436030181126113ee57600080fd5b8301803591506001600160401b0382111561140857600080fd5b6020019150600581901b3603821315610fc457600080fd5b6001600160401b03878116825286166020820152604081018590526060810184905260a060808201819052810182905260006001600160fb1b0383111561146657600080fd5b8260051b808560c08501379190910160c001979650505050505050565b60005b8381101561149e578181015183820152602001611486565b50506000910152565b60408152600083518060408401526114c6816060850160208801611483565b6001600160401b0393909316602083015250601f91909101601f191601606001919050565b600082516112ec818460208701611483565b602081526000611511602083018486611380565b94935050505056fea26469706673582212207ed46b7f141142ddd60aaf582ba51961f96984a2ec68dc4d12c462bc20a32f9164736f6c63430008170033a2646970667358221220a9a29855c8c2a69b12eea5b4a77a92ab918dbe7e19eb0eccda38704c574a1e8664736f6c63430008170033",
  "libraries": {
    "MerkleV2": "0x33436035441927Df1a73FE3AAC5906854632e53d"
  },
  "devdoc": {
    "events": {
      "ApplicationCreated(address,address,address[],address,bytes32,address)": {
        "details": "MUST be triggered on a successful call to `newApplication`.",
        "params": {
          "app": "The application",
          "appOwner": "The initial application owner",
          "consensus": "The initial consensus contract",
          "inputBox": "The input box contract",
          "inputRelays": "The input relays",
          "templateHash": "The initial machine state hash"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "calculateApplicationAddress(address,address,address[],address,bytes32,bytes32)": {
        "details": "Beware that only the `newApplication` function with the `_salt` parameter      is able to deterministically deploy an application.",
        "params": {
          "_appOwner": "The initial application owner",
          "_consensus": "The initial consensus contract",
          "_inputBox": "The input box contract",
          "_inputRelays": "The input relays",
          "_salt": "The salt used to deterministically generate the application address",
          "_templateHash": "The initial machine state hash"
        },
        "returns": {
          "_0": "The deterministic application address"
        }
      },
      "newApplication(address,address,address[],address,bytes32)": {
        "details": "On success, MUST emit an `ApplicationCreated` event.",
        "params": {
          "_appOwner": "The initial application owner",
          "_consensus": "The initial consensus contract",
          "_inputBox": "The input box contract",
          "_inputRelays": "The input relays",
          "_templateHash": "The initial machine state hash"
        },
        "returns": {
          "_0": "The application"
        }
      },
      "newApplication(address,address,address[],address,bytes32,bytes32)": {
        "details": "On success, MUST emit an `ApplicationCreated` event.",
        "params": {
          "_appOwner": "The initial application owner",
          "_consensus": "The initial consensus contract",
          "_inputBox": "The input box contract",
          "_inputRelays": "The input relays",
          "_salt": "The salt used to deterministically generate the application address",
          "_templateHash": "The initial machine state hash"
        },
        "returns": {
          "_0": "The application"
        }
      }
    },
    "title": "Application Factory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ApplicationCreated(address,address,address[],address,bytes32,address)": {
        "notice": "A new application was deployed."
      }
    },
    "kind": "user",
    "methods": {
      "calculateApplicationAddress(address,address,address[],address,bytes32,bytes32)": {
        "notice": "Calculate the address of an application to be deployed deterministically."
      },
      "newApplication(address,address,address[],address,bytes32)": {
        "notice": "Deploy a new application."
      },
      "newApplication(address,address,address[],address,bytes32,bytes32)": {
        "notice": "Deploy a new application deterministically."
      }
    },
    "notice": "Allows anyone to reliably deploy a new `Application` contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}